{"version":3,"sources":["../src/server.js"],"names":["PORT","process","env","app","use","express","json","urlencoded","extended","db","Database","post","req","res","body","roomId","logUrl","init","insert","close","status","send","error","code","message","get","query","queryResult","httpServer","http","createServer","wsServer","Server","cors","origin","allowEIO3","rooms","phoneUsers","deviceUsers","on","socket","onAny","event","console","log","reason","SERVER_DISCONNECT","currentSocketId","id","isPhoneUser","find","phone","socketId","undefined","targetPhone","targetDevice","device","ipaddress","filter","isHost","room","emit","disconnectSockets","deviceSocket","sockets","leave","userList","e","errorMsg","args","push","callback","currentRoom","disconnect","title","username","language","join","to","phoneUser","removeIndex","findIndex","splice","fontSize_per","fontColor","targetRoom","mode","client","conn","remoteAddress","comment","time","targetId","reaction","handleListen","listen"],"mappings":"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","sourcesContent":["import http from \"http\";\nimport { Server } from \"socket.io\";\nimport express from \"express\";\n\nimport { Database } from \"./database\";\nimport { SERVER_DISCONNECT } from \"./constants\";\nimport {\n  emitErrorToSelf,\n  emitErrorToDevice,\n  emitErrorToAll,\n  generateRoomId,\n  getUserList,\n  getDeviceByIPAddress,\n} from \"./utils\";\n\nconst PORT = process.env.PORT || 4000;\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\nconst db = new Database();\n\n// ログダウンロードURL送信\napp.post(\"/send-log-url\", async (req, res) => {\n  if (!req.body) {\n    return;\n  }\n\n  const { roomId, logUrl } = req.body;\n  try {\n    db.init();\n    db.insert(\"INSERT INTO log(roomId, logUrl) values(?, ?)\", [roomId, logUrl]);\n    db.close();\n\n    return res.status(201).send();\n  } catch (e) {\n    return res.status(500).send({\n      error: { code: 500, message: \"Fail to post data\" },\n    });\n  }\n});\n\n// ログダウンロードURL入手\napp.get(\"/get-log-url\", async (req, res) => {\n  const roomId = req.query.roomId;\n\n  try {\n    db.init();\n    const queryResult = await db.get(\"SELECT * FROM log WHERE roomId = ?\", [\n      roomId,\n    ]);\n    db.close();\n\n    return res.status(200).send({ logUrl: queryResult.logUrl });\n  } catch (e) {\n    return res.status(404).send({\n      error: { code: 404, message: \"Failed on getting data from database\" },\n    });\n  }\n});\n\nconst httpServer = http.createServer(app);\nconst wsServer = new Server(httpServer, {\n  cors: {\n    origin: \"*\",\n  },\n  // serveClient: false,\n  allowEIO3: true,\n});\n\nlet rooms = [];\nlet phoneUsers = [];\nlet deviceUsers = [];\n\nwsServer.on(\"connection\", (socket) => {\n  // イベント発火時のコンソール表示\n  socket.onAny((event) => {\n    console.log(`イベント: ${event}`);\n  });\n\n  // 接続切れの処理\n  socket.on(\"disconnect\", (reason) => {\n    if (reason !== SERVER_DISCONNECT) {\n      const currentSocketId = socket.id;\n\n      const isPhoneUser =\n        phoneUsers.find((phone) => phone.socketId === currentSocketId) !==\n        undefined\n          ? true\n          : false;\n\n      let targetPhone, targetDevice;\n      if (isPhoneUser) {\n        targetPhone = phoneUsers.find(\n          (phone) => phone.socketId === currentSocketId\n        );\n        targetDevice = deviceUsers.find(\n          (device) => device.ipaddress === targetPhone?.ipaddress\n        );\n      } else {\n        targetDevice = deviceUsers.find(\n          (device) => device.socketId === currentSocketId\n        );\n        targetPhone = phoneUsers.find(\n          (phone) => phone.ipaddress === targetDevice?.ipaddress\n        );\n      }\n\n      const roomId = targetPhone?.roomId;\n      const ipaddress = targetPhone?.ipaddress;\n\n      phoneUsers = phoneUsers.filter((phone) => phone.ipaddress !== ipaddress);\n      deviceUsers = deviceUsers.filter(\n        (device) => device.ipaddress !== ipaddress\n      );\n\n      if (targetPhone?.isHost) {\n        phoneUsers = [];\n        deviceUsers = [];\n        rooms = rooms.filter((room) => room.roomId !== roomId);\n\n        wsServer.emit(\"change-screen-leave\");\n\n        wsServer.emit(\"terminate-room-effect\");\n\n        wsServer.disconnectSockets();\n      } else {\n        try {\n          if (targetDevice !== undefined) {\n            const deviceSocket = wsServer.sockets.sockets.get(\n              targetDevice.socketId\n            );\n            deviceSocket.leave(roomId);\n            socket.leave(roomId);\n\n            wsServer.emit(\"leave-room-effect\", {\n              userList: getUserList(phoneUsers, roomId),\n            });\n          }\n        } catch (e) {\n          emitErrorToSelf(socket, { errorMsg: \"エラーが発生しました。\" });\n        }\n      }\n\n      console.log(\"rooms: \", rooms);\n      console.log(\"phoneUsers: \", phoneUsers);\n      console.log(\"deviceUsers: \", deviceUsers);\n    }\n  });\n\n  // 本体起動時にデバイス情報を登録\n  socket.on(\"entry\", (args) => {\n    deviceUsers.push({\n      socketId: socket.id,\n      ipaddress: args.ipaddress,\n      roomId: \"\",\n    });\n\n    // ルーム情報取得\n    socket.on(\"get-room\", ({ roomId }, callback) => {\n      const currentRoom = rooms.find((room) => room.roomId === roomId);\n      if (!currentRoom) {\n        emitErrorToSelf(socket, { errorMsg: \"現在のルームを把握できません。\" });\n        socket.disconnect(true);\n        return;\n      }\n\n      callback({\n        title: currentRoom.title,\n        userList: getUserList(phoneUsers, roomId),\n      });\n    });\n\n    // ルーム作成\n    socket.on(\n      \"create-room\",\n      ({ title, username, ipaddress, language }, callback) => {\n        const roomId = generateRoomId(5);\n\n        rooms.push({\n          title: title,\n          username: username,\n          ipaddress: ipaddress,\n          language: language,\n          roomId: roomId,\n        });\n\n        phoneUsers.push({\n          socketId: socket.id,\n          ipaddress: ipaddress,\n          roomId: roomId,\n          username: username,\n          language: language,\n          isHost: true,\n        });\n\n        const targetDevice = getDeviceByIPAddress(deviceUsers, ipaddress);\n        if (targetDevice !== undefined) {\n          targetDevice.roomId = roomId;\n\n          const deviceSocket = wsServer.sockets.sockets.get(\n            targetDevice.socketId\n          );\n          deviceSocket.join(roomId);\n        }\n\n        socket.join(roomId);\n\n        callback({\n          roomId: roomId,\n        });\n\n        try {\n          wsServer.in(roomId).emit(\"join-room-effect\", {\n            userList: getUserList(phoneUsers, roomId),\n          });\n        } catch {\n          emitErrorToAll(wsServer, {\n            roomId,\n            errorMsg: \"エラーが発生しました。\",\n          });\n        }\n\n        try {\n          socket\n            .to(targetDevice.socketId)\n            .emit(\"change-screen-enter\", { roomId, username });\n        } catch {\n          emitErrorToSelf(socket, {\n            errorMsg: \"本体デバイスを検索できませんでした。\",\n          });\n          socket.disconnect(true);\n        }\n\n        console.log(\"rooms: \", rooms);\n        console.log(\"phoneUsers: \", phoneUsers);\n        console.log(\"deviceUsers: \", deviceUsers);\n      }\n    );\n\n    //ルーム参加処理\n    socket.on(\n      \"join-room\",\n      function ({ username, roomId, ipaddress, language }, callback) {\n        phoneUsers.push({\n          socketId: socket.id,\n          ipaddress: ipaddress,\n          roomId: roomId,\n          username: username,\n          language: language,\n          isHost: false,\n        });\n\n        const targetDevice = getDeviceByIPAddress(deviceUsers, ipaddress);\n        if (targetDevice !== undefined) {\n          targetDevice.roomId = roomId;\n\n          const deviceSocket = wsServer.sockets.sockets.get(\n            targetDevice.socketId\n          );\n          deviceSocket.join(roomId);\n        }\n\n        socket.join(roomId);\n\n        // FIXME: コールバックしないといけないかフロントのコードに合わせて削除してもいいと思う。\n        callback({\n          userList: getUserList(phoneUsers, roomId),\n        });\n\n        try {\n          wsServer.emit(\"join-room-effect\", {\n            userList: getUserList(phoneUsers, roomId),\n          });\n        } catch (e) {\n          emitErrorToAll(wsServer, {\n            roomId,\n            errorMsg: \"エラーが発生しました。\",\n          });\n        }\n\n        try {\n          socket\n            .to(targetDevice.socketId)\n            .emit(\"change-screen-enter\", { roomId, username });\n        } catch (e) {\n          emitErrorToSelf(socket, {\n            errorMsg: \"本体デバイスを検索できませんでした。\",\n          });\n          socket.disconnect(true);\n        }\n\n        console.log(\"rooms: \", rooms);\n        console.log(\"phoneUsers: \", phoneUsers);\n        console.log(\"deviceUsers: \", deviceUsers);\n      }\n    );\n\n    // ルーム退出\n    socket.on(\"leave-room\", ({ ipaddress }) => {\n      const targetDevice = getDeviceByIPAddress(deviceUsers, ipaddress);\n\n      const phoneUser = phoneUsers.find(\n        (phone) => phone.ipaddress === ipaddress\n      );\n\n      if (phoneUser.isHost) {\n        phoneUsers = [];\n        deviceUsers = [];\n        rooms = rooms.filter((room) => room.roomId !== phoneUser.roomId);\n\n        wsServer.emit(\"change-screen-leave\");\n\n        wsServer.emit(\"terminate-room-effect\");\n\n        wsServer.disconnectSockets();\n      } else {\n        const removeIndex = phoneUsers.findIndex(\n          (phone) => phone.ipaddress === ipaddress\n        );\n        phoneUsers.splice(removeIndex, 1);\n\n        deviceUsers = deviceUsers.filter(\n          (device) => device.ipaddress !== ipaddress\n        );\n\n        try {\n          socket.to(targetDevice.socketId).emit(\"change-screen-leave\");\n        } catch (e) {\n          emitErrorToSelf(socket, { errorMsg: \"エラーが発生しました。\" });\n          socket.disconnect(true);\n        }\n\n        try {\n          wsServer.emit(\"leave-room-effect\", {\n            userList: getUserList(phoneUsers, phoneUser.roomId),\n          });\n\n          if (targetDevice !== undefined) {\n            const deviceSocket = wsServer.sockets.sockets.get(\n              targetDevice.socketId\n            );\n            deviceSocket.leave(phoneUser.roomId);\n          }\n\n          socket.leave(phoneUser.roomId);\n        } catch (e) {\n          emitErrorToAll(wsServer, {\n            roomId: phoneUser.roomId,\n            errorMsg: \"エラーが発生しました。\",\n          });\n        }\n      }\n      console.log(\"rooms: \", rooms);\n      console.log(\"phoneUsers: \", phoneUsers);\n      console.log(\"deviceUsers: \", deviceUsers);\n    });\n\n    // ルーム解散\n    socket.on(\"terminate-room\", ({ roomId }) => {\n      phoneUsers = phoneUsers.filter((phone) => phone.roomId !== roomId);\n      deviceUsers = deviceUsers.filter((device) => device.roomId !== roomId);\n      rooms = rooms.filter((room) => room.roomId !== roomId);\n\n      try {\n        wsServer.emit(\"terminate-room-effect\");\n\n        wsServer.emit(\"change-screen-leave\");\n\n        wsServer.disconnectSockets(roomId);\n      } catch (e) {\n        emitErrorToAll(wsServer, {\n          roomId,\n          errorMsg: \"エラーが発生しました。\",\n        });\n        socket.disconnect(true);\n      }\n\n      console.log(\"rooms: \", rooms);\n      console.log(\"phoneUsers: \", phoneUsers);\n      console.log(\"deviceUsers: \", deviceUsers);\n    });\n\n    // アクセシビリティ更新\n    socket.on(\n      \"change-accessibility\",\n      ({ fontSize_per, fontColor, ipaddress }) => {\n        const targetDevice = getDeviceByIPAddress(deviceUsers, ipaddress);\n\n        if (targetDevice !== undefined) {\n          try {\n            socket\n              .to(targetDevice.socketId)\n              .emit(\"change-accessibility-effect\", { fontSize_per, fontColor });\n          } catch (error) {\n            emitErrorToSelf(socket, {\n              errorMsg: \"アクセシビリティ変更にエラーが発生しました。\",\n            });\n          }\n        }\n      }\n    );\n\n    // 議題変更\n    socket.on(\"updated-title\", ({ roomId, title }) => {\n      const targetRoom = rooms.find((room) => room.roomId === roomId);\n\n      if (targetRoom !== undefined) {\n        try {\n          wsServer\n            .in(targetRoom.roomId)\n            .emit(\"updated-title-effect\", { title });\n        } catch (error) {\n          emitErrorToAll(wsServer, {\n            roomId: targetRoom.roomId,\n            errorMsg: \"タイトル更新にエラーが発生しました。\",\n          });\n        }\n      }\n    });\n\n    // モード切替\n    socket.on(\"change-mode\", ({ ipaddress, mode }) => {\n      const targetDevice = getDeviceByIPAddress(deviceUsers, ipaddress);\n\n      if (targetDevice !== undefined) {\n        try {\n          socket.to(targetDevice.socketId).emit(\"change-mode-effect\", { mode });\n        } catch (error) {\n          emitErrorToSelf(socket, { errorMsg: \"エラーが発生しました。\" });\n        }\n      }\n    });\n\n    //AI用\n    socket.on(\"send-detected-voice\", (args) => {\n      const targetDevice = getDeviceByIPAddress(\n        deviceUsers,\n        socket.client.conn.remoteAddress\n      );\n\n      try {\n        wsServer.emit(\"emit-log\", {\n          username: targetDevice.username,\n          comment: args.comment,\n          time: args.time,\n        });\n      } catch (e) {\n        emitErrorToDevice(socket, {\n          targetId: targetDevice.socketId,\n          errorMsg: \"エラーが発生しました。\",\n        });\n      }\n    });\n\n    socket.on(\"send-detected-gesture\", (args) => {\n      const targetDevice = getDeviceByIPAddress(\n        deviceUsers,\n        socket.client.conn.remoteAddress\n      );\n\n      try {\n        wsServer.emit(\"emit-reaction\", {\n          username: targetDevice.username,\n          reaction: args.reaction,\n          time: args.time,\n        });\n      } catch (e) {\n        emitErrorToDevice(socket, {\n          targetId: targetDevice.socketId,\n          errorMsg: \"エラーが発生しました。\",\n        });\n      }\n    });\n  });\n});\n\nconst handleListen = () => console.log(`Listening on http://localhost:${PORT}`);\n\nhttpServer.listen(PORT, \"0.0.0.0\", handleListen);\n"],"file":"server.js"}
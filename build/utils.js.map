{"version":3,"sources":["../src/utils.js"],"names":["generateRoomId","idLength","CHARACTERS","generatedId","i","charAt","Math","floor","random","length","getUserList","users","roomId","usersInRoom","filter","user","map","getDeviceByUniqueId","deviceUsers","uniqueId","find","device","getPhoneByUniqueId","phoneUsers","phone","emitErrorToAll","socket","errorMsg","emit","emitErrorToDevice","targetId","to","emitErrorToSelf"],"mappings":";;;;;;;;;;;;;AAAA;AACO,SAASA,cAAT,CAAwBC,QAAxB,EAAkC;AACvC,MAAMC,UAAU,GAAG,sCAAnB;AAEA,MAAIC,WAAW,GAAG,EAAlB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,QAApB,EAA8BG,CAAC,EAA/B,EAAmC;AACjCD,IAAAA,WAAW,IAAID,UAAU,CAACG,MAAX,CACbC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBN,UAAU,CAACO,MAAtC,CADa,CAAf;AAGD;;AACD,SAAON,WAAP;AACD,C,CAED;;;AACO,SAASO,WAAT,CAAqBC,KAArB,EAA4BC,MAA5B,EAAoC;AACzC,MAAMC,WAAW,GAAGF,KAAK,CAACG,MAAN,CAAa,UAACC,IAAD;AAAA,WAAUA,IAAI,CAACH,MAAL,KAAgBA,MAA1B;AAAA,GAAb,CAApB;AACA,SAAOC,WAAW,CAACG,GAAZ,CAAgB,UAACD,IAAD;AAAA,WAAUA,IAAI,CAAC,UAAD,CAAd;AAAA,GAAhB,CAAP;AACD,C,CAED;;;AACO,SAASE,mBAAT,CAA6BC,WAA7B,EAA0CC,QAA1C,EAAoD;AACzD,SAAOD,WAAW,CAACE,IAAZ,CAAiB,UAACC,MAAD;AAAA,WAAYA,MAAM,CAACF,QAAP,KAAoBA,QAAhC;AAAA,GAAjB,CAAP;AACD,C,CAED;;;AACO,SAASG,kBAAT,CAA4BC,UAA5B,EAAwCJ,QAAxC,EAAkD;AACvD,SAAOI,UAAU,CAACH,IAAX,CAAgB,UAACI,KAAD;AAAA,WAAWA,KAAK,CAACL,QAAN,KAAmBA,QAA9B;AAAA,GAAhB,CAAP;AACD,C,CAED;;;AACO,SAASM,cAAT,CAAwBC,MAAxB,QAAsD;AAAA,MAApBd,MAAoB,QAApBA,MAAoB;AAAA,MAAZe,QAAY,QAAZA,QAAY;AAC3DD,EAAAA,MAAM,MAAN,CAAUd,MAAV,EAAkBgB,IAAlB,CAAuB,OAAvB,EAAgC;AAAED,IAAAA,QAAQ,EAARA;AAAF,GAAhC;AACD,C,CAED;;;AACO,SAASE,iBAAT,CAA2BH,MAA3B,SAA2D;AAAA,MAAtBI,QAAsB,SAAtBA,QAAsB;AAAA,MAAZH,QAAY,SAAZA,QAAY;AAChED,EAAAA,MAAM,CAACK,EAAP,CAAUD,QAAV,EAAoBF,IAApB,CAAyB,OAAzB,EAAkC;AAAED,IAAAA,QAAQ,EAARA;AAAF,GAAlC;AACD,C,CAED;;;AACO,SAASK,eAAT,CAAyBN,MAAzB,SAA+C;AAAA,MAAZC,QAAY,SAAZA,QAAY;AACpDD,EAAAA,MAAM,CAACE,IAAP,CAAY,OAAZ,EAAqB;AAAED,IAAAA,QAAQ,EAARA;AAAF,GAArB;AACD","sourcesContent":["// ルームIDの生成\nexport function generateRoomId(idLength) {\n  const CHARACTERS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n\n  let generatedId = \"\";\n  for (let i = 0; i < idLength; i++) {\n    generatedId += CHARACTERS.charAt(\n      Math.floor(Math.random() * CHARACTERS.length)\n    );\n  }\n  return generatedId;\n}\n\n// ユーザリストの返還\nexport function getUserList(users, roomId) {\n  const usersInRoom = users.filter((user) => user.roomId === roomId);\n  return usersInRoom.map((user) => user[\"username\"]);\n}\n\n// デバイスの取得\nexport function getDeviceByUniqueId(deviceUsers, uniqueId) {\n  return deviceUsers.find((device) => device.uniqueId === uniqueId);\n}\n\n//ユーザーネームの取得\nexport function getPhoneByUniqueId(phoneUsers, uniqueId) {\n  return phoneUsers.find((phone) => phone.uniqueId === uniqueId);\n}\n\n// エラーエミット(全体向け)\nexport function emitErrorToAll(socket, { roomId, errorMsg }) {\n  socket.in(roomId).emit(\"error\", { errorMsg });\n}\n\n// エラーエミット(単体デバイス向け)\nexport function emitErrorToDevice(socket, { targetId, errorMsg }) {\n  socket.to(targetId).emit(\"error\", { errorMsg });\n}\n\n// エラーエミット(自身向け)\nexport function emitErrorToSelf(socket, { errorMsg }) {\n  socket.emit(\"error\", { errorMsg });\n}\n"],"file":"utils.js"}